# This is a default home.nix generated by the follwing hone-manager command
#
# home-manager init ./

{
  config,
  lib,
  pkgs,
  ...
}:
let
  # Define your config folders
  configFolders = [
    "nvim"
    "swaync"
    "dunst"
    "wlogout"
    "waybar"
    "wal"
    "matugen"
    "gtk-3.0"
    "gtk-4.0"
  ];

  # Define script folders (different base path)
  scriptFolders = [
    "scripts"
  ];

  # Helper function to create symlink configs
  createSymlinkConfig = folder: {
    source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/nixConfig/home/dots/${folder}";
    recursive = true;
    onChange = ''
      echo "${folder} config changed, files in ~/.config/${folder}:"
      ls -la ~/.config/${folder}/
    '';
  };

  # Helper function for script configs
  createScriptConfig = folder: {
    source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/nixConfig/home/${folder}";
    recursive = true;
    onChange = ''
      echo "${folder} config changed, files in ~/.config/${folder}:"
      ls -la ~/.config/${folder}/
    '';
  };

in
{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = lib.mkDefault "lajna";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "24.05"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = with pkgs; [
    cowsay
    wofi
    vscodium
    nvtopPackages.full
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  #Kitty forsted glass look
  programs.kitty = {
    enable = true;
    settings = {
      background_opacity = "0.7";
    };
    extraConfig = ''
      background_blur 32
    '';
  };

  programs.alacritty = {
    enable = true;
    settings = {
      window = {
        opacity = 0.8;
      };
      font = {
        normal = {
          family = "FiraCode Nerd Font";
          style = "Regular";
        };
        bold = {
          family = "FiraCode Nerd Font";
          style = "Bold";
        };
        italic = {
          family = "FiraCode Nerd Font";
          style = "Italic";
        };
        bold_italic = {
          family = "FiraCode Nerd Font";
          style = "Bold Italic";
        };
        size = 12;
      };
    };
  };

  xdg.configFile =
    # Generate config folder mappings
    (builtins.listToAttrs (
      map (folder: {
        name = folder;
        value =
          if folder == "gtk-3.0" || folder == "gtk-4.0" then
            {
              source = ../dots/${folder};
              recursive = true;
            }
          else
            createSymlinkConfig folder;
      }) configFolders
    ))

    # Generate script folder mappings
    // (builtins.listToAttrs (
      map (folder: {
        name = folder;
        value = createScriptConfig folder;
      }) scriptFolders
    ))

    # Special case for ulauncher (different handling)
    // {
      "ulauncher/.home-manager-copy-trigger" = {
        text = "This file triggers the copy operation";
        onChange = ''
          rm -rf ${config.xdg.configHome}/ulauncher
          cp -R ${../dots/ulauncher} ${config.xdg.configHome}/ulauncher
          chmod -R u+w ${config.xdg.configHome}/ulauncher
        '';
      };
    };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/m3tam3re/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    EDITOR = "nvim";
  };

  services.ssh-agent.enable = true;

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}
